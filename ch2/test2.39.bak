#lang racket

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (fold-right op init seq)
  (accumulate op init seq))

(define (fold-left op init seq)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter init seq))

(define (append x y)
  (if (null? x)
      '()
      (cons (car x)
            (append (cdr x) y))))
       
       
       
       
;如果要满足结果一样,则要求op操作符本身具备交换性

(define (reverse-1 x)
  (fold-left (lambda (result this)
                (cons this result))
              '()
              x))

(define (reverse-2 x)
  (fold-right (lambda (this result)
                (list result this))
              '()
              x))